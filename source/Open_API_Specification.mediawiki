==Legal Notice==

Please check the [[FI-WARE Open Specifications Legal Notice ]] to understand the rights to use FI-WARE Open Specifications.

==Introduction==

The Stream Oriented API is a RESTful resource-oriented API accessed via HTTP/HTTPS that uses JSON-RPC V2.0 based representations for information exchange. This document describes the API exposed by the Application Server as defined in the [[FIWARE.ArchitectureDescription.Data.StreamOriented | GE Architecture Description]].

==Intended Audience==

This specification is intended for both software developers and implementors of this GE. For developers, this document details the RESTful API to build interactive multimedia applications compliant with the [[FIWARE.ArchitectureDescription.Data.StreamOriented  | GE Architecture Description]]. Implementors can build their GEi APIs based on the information contained in this specification.

Before reading this document it is recommended to read first the [[FIWARE.ArchitectureDescription.Data.StreamOriented  | GE Architecture Description]] and the [[StreamOriented_-_User_and_Programmers_Guide | Programmers Guide]]. Moreover, the reader should be also familiar with:

* RESTful web services
* [http://www.ietf.org/rfc/rfc2616.txt HTTP/1.1 (RFC2616)]
* [http://www.ietf.org/rfc/rfc4627.txt?number=4627 JSON] data serialization format.

==Conventions used in this document==

Some special notations are applied to differentiate some special words or concepts. The following list summarizes these special notations:

* A '''bold''', mono-spaced font is used to represent code or logical entities, e.g., HTTP method ('''GET''', '''PUT''', '''POST''', '''DELETE''').
* An ''italic'' font is used to represent document titles or some other kind of special text, e.g., ''URI''.
* Variables are represented between brackets, e.g. ''{id}'', and in italic font. When the reader finds one, it can assume that the variable can be changed for any value.


=API General Features=

==Authentication==

Currently, the Steam Oriented GE does not include any kind of authenthication mechanism, being the application responsible of implementing it in case it is necessary.
<!-- Each HTTP request in an API may require the inclusion of specific authentication credentials. The specific implementation of the API implemented by a given Generic Enabler implementor (GEi) may support multiple authentication schemes (OAuth, Basic Auth, Token) to be determined by the specific provider that implements the GE.-->

==Representation Transport==

Resource representation is transmitted between client and server by using HTTP 1.1 protocol, as defined by IETF RFC-2616. Each time an HTTP request contains payload, a Content-Type header shall be used to specify the MIME type of wrapped representation. In addition, both client and server may use as many HTTP headers as they consider necessary.

==Representation Format==

Stream Oriented RESTful APIs support JSON as representation format for request and response parameters following the recommendations in the proposal [http://www.simple-is-better.org/json-rpc/jsonrpc20-over-http.html JSON-RPC over HTTP].

The format of the requests is specified by using the ''Content-Type'' header with a value of ''application/json-rpc'' and is required for requests containing a body. The format required for the response is specified in the request by setting the ''Accept'' header to the value ''application/json-rpc'', that is, request and response bodies are serialized using the same format.

===Request object===

An ''RPC call'' is represented by sending a ''Request object'' to a server. The ''Request object'' has the following members:

*''jsonrpc'': a string specifying the version of the JSON-RPC protocol. It must be exactly "2.0".
*''method'': a string containing the name of the method to be invoked.
*''params'': a structured value that holds the parameter values to be used during the invocation of the method. 
*''id'': an identifier established by the client that contains a string or number. The server must reply with the same value in the ''Response object''. This member is used to correlate the context between both objects.

===Successful Response object===

When an ''RPC call'' is made the server replies with a ''Response object''. In the case of a successful response, the ''Response object'' will contain the following members:

*''jsonrpc'': a string specifying the version of the JSON-RPC protocol. It must be exactly "2.0".
*''result'': its value is determined by the method invoked on the server. In case the connection is rejected, it's returned an object with a ''rejected'' attribute containing an object with a ''code'' and ''message'' attributes with the reason why the session was not accepted, and no sessionId is defined.
*''id'': this member is mandatory and it must match the value of the ''id'' member in the ''Request object''.

===Error Response object===

When an ''RPC call'' is made the server replies with a ''Response object''. In the case of an error response, the ''Response object'' will contain the following members:

*''jsonrpc'': a string specifying the version of the JSON-RPC protocol. It must be exactly "2.0".
*''error'': an object describing the error through the following members:
**''code'': an integer number that indicates the error type that occurred.
**''message'': a string providing a short description of the error.
**''data'': a primitive or structured value that contains additional information about the error. It may be omitted. The value of this member is defined by the server.
*''id'': this member is mandatory and it must match the value of the ''id'' member in the ''Request object''. If there was an error in detecting the ''id'' in the ''Request object'' (e.g. Parse Error/Invalid Request), it equals to null.

==Limits==

Media processing is very CPU intensive and therefore the developer should be aware that the creation of multiple simultaneous sessions can exhaust server resources. Thus, limits are not specified for 1.0.0 version of the Stream Oriented GE.

==Extensions==

Querying extensions is not supported in current version of the Stream Oriented GE.

=API Specification=

This section details the actual APIs of each of the managers defined in this GE, namely, the Content Manager API. It is recommended to review the [[StreamOriented_-_User_and_Programmers_Guide | Programmers Guide]] before proceeding with this section.

==Content API==

The Content API is exposed in the form of four services: ''HttpPlayer'', ''HttpRecorder'', ''RtpContent'' and ''WebRtcContent'' described in the following subsections.

===HttpPlayer===

This service allows requesting a content to be retrieved from a Media Server using HTTP pseudostreaming.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Performs an RPC call regarding ''{ContentID}''. The ''Request object'' is processed by the ''HttpPlayer'' application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application.
|}

The ''Request object'' (body of the HTTP request) can contain one of these four methods: ''start'', ''poll'', ''execute'', and ''terminate''.

====start====

Requests the retrieval of the content. The parameter ''constraints'' indicates the kind of media (audio or/and video) to be received. In the case of ''HttpPlayer'', the values for these constraints for audio and video should be ''recvonly''. The following example shows a ''Request object'' requesting to receive audio and video:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "method": "start",
  "params": 
  {
    "constraints": 
    {
      "audio": "recvonly", 
      "video": "recvonly"
    }
  },
  "id": 1
}
</pre>

The ''Response object'' contains a ''sessionId'' to identify the session and the actual URL to retrieve the content from:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "result": 
  {
    sessionId": 1234, 
    "url": "http://mediaserver/a13e9469-fec1-4eee-b40c-8cd90d5fc155"
  },
  "id": 1
}
</pre>

====poll====

This method allows emulating ''push events'' coming from the server by using a technique kown as ''long polling''. With long polling, the client requests information from the server in a way similar to a normal polling; however, if the server does not have any information available for the client, instead of sending an empty response, it holds the request and waits for information to become available until a timeout is expired. If the timeout is expired before any information has become available the server sends an empty response and the client re-issues a new poll request. If, on the contrary, some information is available, the server pushes that information to the client and then the client re-issues a new poll request to restart the process.

The ''params'' includes an object with only a ''sessionId'' attribute containing the ID for this session.

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "method": "poll",
  "params":
  {
    "sessionId": 1234
  },
  "id": 1
}
</pre>

The ''Response object'' has a ''contentEvents'' attribute containing an array with the latest MediaEvents, and a ''controlEvents'' attribute containing an array with the latest control events for this session, or an empty object if none was generated. Each control event can has an optional data attribute containing an object with a ''code'' and a ''message'' attributes.

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "result":
  {
    "contentEvents":
    [
      {"type": "typeOfEvent1",
       "data": "dataOfEvent1},
      {"type": "typeOfEvent2",
       "data": "dataOfEvent2"}
    ],
    "controlEvents":
    [
      {
        "type": "typeOfEvent1",
        "data":
        {
          "code": 1,
          "message": "license plate" 
        }
      }
    ]
  },
  "id": 1
}
</pre>

====execute====

Exec a command on the server. The ''param'' object has a ''sessionId'' attribute containing the ID for this session, and a ''command'' object with a ''type'' string attribute for the command type and a ''data'' attribute for the command specific parameters.

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "method": "execute",
  "params":
  {
    "sessionId": 1234,
    "command":
    {
      "type": "commandType",
      "data": ["the", "user", "defined", "command", "parameters"]
    }
  },
  "id": 1
}
</pre>

The ''Response object'' is an object with only a ''commandResult'' attribute containing a string with the command results.

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "result":
  {
    "commandResult": "Everything has gone allright" 
  },
  "id": 1
}
</pre>

====terminate====

Requests the termination of the session identified by ''sessionId'' so the server can release the resources assigned to it:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "method": "terminate",
  "params":
  {
    "sessionId": 1234,
    "reason":
    {
      "code": 1,
      "message": "User ended session" 
    }
  }
}
</pre>

The ''Response object'' is an empty object:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "result": {},
  "id": 2
}
</pre>

====Simplified alternative approach====

The ''HttpPlayer'' service just described is consistent with the rest of APIs defined in the Stream Oriented GE. However, it is recommended to also expose a simpler API as described here not requiring the use of JSON.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''GET'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Requests ''{ContentID}'' to be served according to the application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application
|}

Successful Response Codes: 200 OK, 307 Temporary Redirect (to the actual content).

Error Response Codes: 404 Not Found, 500 Internal Server Error.

===HttpRecorder===

This service allows the upload of a content through HTTP to be stored in a Media Server.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Performs an RPC call regarding ''{ContentID}''. The ''Request object'' is processed by the ''HttpRecorder'' application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application.
|}

The ''Request object'' (body of the HTTP request) can contain one of these four methods: ''start'', ''poll'', ''execute'', and ''terminate''.

====start====

Requests the storage of the content. The parameter ''constraints'' indicates the kind of media (audio or/and video) to be sent. In the case of ''HttpRecorder'', the values for these constraints for audio and video should be ''sendonly''. The following example shows a ''Request object'' requesting to send audio and video:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "method": "start",
  "params": 
  {
    "constraints": 
    {
      "audio": "sendonly", 
      "video": "sendonly"
    }
  },
"id": 1
}
</pre>

The ''Response object'' contains a ''sessionId'' to identify the session and the actual URL to upload the content to:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "result": 
  {
    "url": "http://mediaserver/a13e9469-fec1-4eee-b40c-8cd90d5fc155", 
    "sessionId": 1234
  },
  "id": 1
}
</pre>

====poll, execute, and terminate====

These operations work in the same way than ''HttpPlayer''. Therefore, for an example of ''Request object'' and ''Response object'' see the sections of ''poll'', ''execute'', and ''terminate'' respectively in ''HttpPlayer''.

====Simplified alternative approach====

The ''HttpRecorder'' service just described is consistent with the rest of APIs defined in the Stream Oriented GE. However, it is recommended to also expose a simpler API as described here not requiring the use of JSON.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Uploads ''{ContentID}'' to be stored according to the application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application
|}

The request body of this method is the content to be uploaded.

Successful Response Codes: 200 OK, 307 Temporary Redirect (to the actual storage server)

Error Response Codes: 404 Not Found, 500 Internal Server Error

===RtpContent===

This service allows establishing an ''RTP content session'' between the client performing the request and a Media Server.

{| style="border-collapse: collapse; border-width: 1px; border-style: solid; border-color: #000" cellpadding="2"
|-
! style="background: silver; border-style: solid; border-width: 1px"| '''Verb'''
! style="background: silver; border-style: solid; border-width: 1px"| '''URI'''
! style="background: silver; border-style: solid; border-width: 1px"| '''Description'''
|-
| style="border-style: solid; border-width: 1px"| '''POST'''
| style="border-style: solid; border-width: 1px"| ''/{CONTEXT-ROOT}/{APP_LOGIC_PATH}/{ContentID}''
| style="border-style: solid; border-width: 1px"| Performs an RPC call regarding ''{ContentID}''. The ''Request object'' is processed by the ''RTPContent'' application handler tied to ''{APP_LOGIC_PATH}'' in the ''{CONTEXT-ROOT}'' of the application.
|}

The ''Request object'' (body of the HTTP request) can contain one of these four methods: ''start'', ''poll'', ''execute'', and ''terminate''.

====start====

Requests the establishment of the RTP session. The parameter ''sdp'' contains the client SDP (Session Description Protocol) offer, that is, a description of the desired session from the caller's perspective. The parameter ''constraints'' indicates the media (audio or/and video) to be received, sent, or sent and received by setting their values to ''recvonly'', ''sendonly'', ''sendrecv'' or ''inactive''. The following example shows a ''Request object'' requesting bidirectional audio and video (i.e. ''sendrecv'' for both audio and video):

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "method": "start",
  "params": 
  {
    "sdp": "Contents_of_Caller_SDP", 
    "constraints": 
    {
      "audio": "sendrecv", 
      "video": "sendrecv"
    }
  },
  "id": 1
}
</pre>

The ''Response object'' contains the Media Server SDP answer, that is, a description of the desired session from the callee's perspective, and a ''sessionId'' to identify the session:

<pre style="white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap;  word-wrap: break-word">
{
  "jsonrpc": "2.0",
  "result": 
  {
    "sdp": "Contents_of_Callee_SDP", 
    "sessionId": 1234
  },
  "id": 1
}
</pre>

====poll, execute, and terminate====

These operations work in the same way than ''HttpPlayer'' and ''HttpRecorder''. Therefore, for an example of ''Request object'' and ''Response object'' see the sections of ''poll'', ''execute'', and ''terminate'' respectively in ''HttpPlayer''.

===WebRtcContent===

Conceptually, ''RtpContent'' and ''WebRtcContent'' are very similar, the main difference is the underlying protocol to exchange media, so all the descriptions in the section above apply to ''WebRtcContent''.

== Media API ==
Media API is a low level Java SDK providing full control of Kurento Media Server. It allows applications to control media server resources. ''Media Elements'' are the building blocks providing a specific media functionality. They are used to send, receive, process and transform media. The Media API provides a toolbox of Media Elements ready to be used. It also provides the capability of creating ''Media Pipelines'' by joining Media Elements of the toolbox.

The Open API provides the capability of accessing directly to the Media API from a client application. An example of client application is shown in the picture above. In this example, a JavaScript application uses the HTML5 SDK API (in the case of Media API is called ''KWS Media API'') to connect Media API using Open API protocol specification. This is just one specific example; in other words, any other application (based on Python, Ruby, etc) could get media access through the Open API.

[[Image:open-api-sample.jpg|375×186px|center|Open API using Media API Architecture Stack Example]]

Notice that when accessing Media API using Open API specification, there is not need of using the Kurento Application Server. This situation has pros and cons. On the one hand, the architecture becomes simpler due to the fact only a the Kurento Media Server (KMS) is required. On the other hand, all the signaling plane implemented by Kurento Application Server (KAS) and Content API are no longer present in the picture. Therefore this logic has to be assumed by the client application, and as a result these applications become more complex.

Open API offers six different types of request/response messages:

* Create: Instantiates a new pipeline or media element in the media server.
* Invoke: Calls a method of an existing media element.
* Subscribe: Creates a subscription to a media event in a media element.
* Unsubscribe: Removes an existing subscription to a media event.
* OnEvent: This message is sent as response of a poll event, informing of the occurrence of a media event.
* Release: Explicit termination of a media element.

=== Examples ===
This section provides several examples of request and response messages to access Media API using the Open API specification. 

The responses depicted in these examples are the messages sent when the request operation is performed correctly. If some problem happens there is a generic error response, in which an [http://www.jsonrpc.org/specification#response_object error code] and a description message in sent, as follows:

<pre>
{
   "jsonrpc": "2.0", 
   "error": 
   {
      "code": -32601, 
      "message": "Error description"
   }, 
   "id": 2
}
</pre>

The first example is a Media Pipeline creation. When the pipeline is correctly created in the media server, the response includes an identifier for this pipeline (<code>XXXX</code> in the example). In addition, a session identifier (<code>sessionId</code>) is also sent in the response (<code>YYYY</code> in the example). This identifier is used in next request/response messages to univocally identify the media session. Notice that each response has the same identifier (field <code>id</code>) than the request.

<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0", 
   "method": "create",
   "params": {
      "type": "MediaPipeline"
   },
   "id": 1
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "value": "XXXX",
      "sessionId": "YYYY"
   },
   "id": 1
}
</pre>
        </td>
    </tr>
</table>

The method create is also used for Media Element creation within a Pipeline. The following example illustrates a PlayerEndPoint creation. The Media Pipeline (<code>XXXX</code> in the example) and session identifier (<code>YYYY</code> in the example) should be included in the request. Additional parameters (in this example, the field uri) depends on the specific Media Element to be created. As a result, the Media Element identifier is returned in the response (<code>AAAA</code> in the example).

<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "method": "create",
   "params": {
      "type": "PlayerEndPoint",
      "creationParams": {
         "pipeline": "XXXX",
         "uri": "http://host/app/video.mp4"
      },
      "sessionId": "YYYY"
   },
   "id": 2
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "value": "AAAA",
      "sessionId": "YYYY"
   },
   "id": 2
}
</pre>
        </td>
    </tr>
</table>

In order to carry out media operations the Media Element invoke is used. In the following example, a connection is made from a source Media Element (<code>AAAA</code> in the example) to a sink Media Element (<code>BBBB</code> in the example). As usual, the session identifier is required in the request (<code>YYYY</code> in the example). In this specific operation (<code>connect</code>), the response does not include any field but the session identifier in order to specify that the operation went correctly.

<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0", 
   "method": "invoke",
   "params": {
      "object": "AAAA",
      "operation": "connect",
      "operationParams": {
         "sink": "BBBB"
      },
      "sessionId": "YYYY"
   },
   "id": 3
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "sessionId": "YYYY"
   },
   "id": 3
}
</pre>
        </td>
    </tr>
</table>

Media Elements are aware to perform a Media Event Subscription. The following examples shows how to perform a subscription to TerminateOnEos event. If the subscription is made correctly in the server, the response includes an identification token as a result (<code>TTTT</code> in the example).

<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0", 
   "method": "subscribe",
   "params": {
      "object": "AAAA",
      "type": "TerminateOnEos",
      "sessionId": "YYYY"
   },
   "id": 4
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "value": "TTTT",
      "sessionId": "YYYY"
   },
   "id": 4
}
</pre>
        </td>
    </tr>
</table>


After a Media Event subscription, it is also possible to perform a Media Event Unsubscription. In this case, the subscription token previously received should be included in the request message.

<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0", 
   "method": "unsubscribe",
   "params": {
      "object": "AAAA",
      "token": "TTTT",
      "sessionId": "YYYY"
   },
   "id": 5
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "sessionId": "YYYY"
   },
   "id": 5
}
</pre>
        </td>
    </tr>
</table>

During a media session, the client sends periodic synchronous requests to the server in order to check media events. This technique is known as ''polling'', and thus the command request method label is poll. When media events are available, the media server responses with onEvent messages in which the event type and data are sent. The following example shows a response for a PointerDetectorFilter, in which events of pointer in and out some regions (called ''windows'') are tracked.

<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0", 
   "method": "poll",
   "params": {
      "sessionId": "YYYY"
   },
   "id": 6
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "method": "onEvent",
      "params": {
         "object": "CCCC",
         "eventType": "WindowOut",
         "eventData": 
         {
            "windowId": "WWWW"
         }
      },
      "sessionId": "YYYY"
   },
   "id": 6
}
</pre>

        </td>
    </tr>
</table>


Finally, a Media Element Release can be explicit request by the client. As usual, the Media Element should be provided in the request (AAAA in the example).


<table border="1" cellspacing="0" cellpading="1" width="60%">
    <tr>
        <th>Request</th>
        <th>Response</th>
    </tr>
    <tr>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0", 
   "method": "release",
   "params": {
      "object": "AAAA",
      "sessionId": "YYYY"
   },
   "id": 7
}
</pre>
        </td>
        <td width="50%" valign="top">
<pre>
{
   "jsonrpc": "2.0",
   "result": {
      "sessionId": "YYYY"
   },
   "id": 7
}
</pre>
        </td>
    </tr>
</table>

=== Complete Specification ===
The Media Element toolbox provided by Media API is divided in Endpoints and Filters. 

* Endpoint offers capabilities to work with protocols and codecs ([[#HttpEnpoint|HttpEnpoint]], [[#RtpEndpoint|RtpEndpoint]] and [[#WebRtcEnpoint|WebRtcEnpoint]]) and also media repository handling ([[#PlayerEndpoint|PlayerEndpoint]] and [[#RecorderEnpoint|RecorderEnpoint]]).
* Filters are responsible of media processing, such as computer vision (Face detection, pointer tracking or bar and QR code reading) and augmented reality (Chroma filtering or face overlay filtering).

Therefore, the Open API protocol specification provides capabilities to create and handle these Media Elements. The following table shows a description at a glance of the Media Elements provided by Media API.

<table border="1" cellspacing="0" cellpading="1" width="100%">
	<tr>
		<th>
			Type
		</th>
		<th>
			Capability
		</th>
		<th>
			Name
		</th>
		<th>
			Icon
		</th>
		<th>
			Description
		</th>
	</tr>
	<tr>
		<td rowspan="6">
			[[#Endpoint|Endpoint]]
		</td>
		<td rowspan="4">
			Protocols and Codecs
		</td>
		<td>
			[[#HttpGetEndpoint|HttpGetEndpoint]]
		</td>
		<td>
			[[Image:http.jpg|120x75px|center|HttpGetEndpoint]]
		</td>
		<td>
			This type of [[#Endpoint|Endpoint]] provide unidirectional communications. Its [[#MediaSink|MediaSink]] are associated with the HTTP GET method. It contains source [[#MediaPad|MediaPad]] for audio and video,  delivering media using HTML5 pseudo-streaming mechanism.
		</td>
	</tr>
	<tr>
		<td>
			[[#HttpPostEndpoint|HttpPostEndpoint]]
		</td>
		<td>
			[[Image:http2.jpg|120x75px|center|HttpPostEndpoint]]
		</td>
		<td>
			This type of [[#Endpoint|Endpoint]] provide unidirectional communications. Its [[#MediaSource|MediaSource]] are related to HTTP POST method. It contains sink [[#MediaPad|MediaPad]] for audio and video, which provide access to an HTTP file upload function.
		</td>
	</tr>
	<tr>
		<td>
			[[#RtpEndpoint|RtpEndpoint]]
		</td>
		<td>
			[[Image:rtp.jpg|120x75px|center|RtpEndpoint]]
		</td>
		<td>
			[[#Endpoint|Endpoint]] that provides bidirectional content delivery capabilities with remote networked peers through RTP protocol. It contains paired sink and source [[#MediaPad|MediaPad]] for audio and video.
		</td>
	</tr>
	<tr>
		<td>
			[[#WebRtcEndpoint|WebRtcEndpoint]]
		</td>
		<td>
			[[Image:webrtc.jpg|120x75px|center|WebRtcEdnpoint]]
		</td>
		<td>
			This [[#Endpoint|Endpoint]] offers media streaming using WebRTC.
		</td>
	</tr>
	<tr>
		<td rowspan="2">
			Media Repository
		</td>
		<td>
			[[#PlayerEndpoint|PlayerEndpoint]]
		</td>
		<td>
			[[Image:player.jpg|120x75px|center|PlayerEndpoint]]
		</td>
		<td>
			It provides function to retrieve contents from seekable sources in reliable mode (does not discard media information) and inject them into KMS. It contains one [[#MediaSource|MediaSource]]for each media type detected.
		</td>
	</tr>
	<tr>
		<td>
			[[#RecorderEndpoint|RecorderEndpoint]]
		</td>
		<td>
			[[Image:recorder.jpg|120x75px|center|RecorderEndpoint]]
		</td>
		<td>
			Provides function to store contents in reliable mode (doesn't discard data). It contains [[#MediaSink|MediaSink]] pads for audio and video.
		</td>
	</tr>
	<tr>
		<td rowspan="7">
			[[#Filter|Filter]]
		</td>
		<td rowspan="5">
			Computer Vision
		</td>
		<td>
			[[#FaceOverlayFilter|FaceOverlayFilter]]
		</td>
		<td>
			[[Image:face.jpg|120x75px|center|FaceOverlayFilter]]
		</td>
		<td>
			It detects faces in a video feed. The face is then overlaid with an image.
		</td>
	</tr>
	<tr>
		<td>
			[[#PointerDetectorFilter|PointerDetectorFilter]]
		</td>
		<td>
			[[Image:pointer.jpg|120x75px|center|PointerDetecterFilter]]
		</td>
		<td>
			It detects pointers in a video feed. The detection of this [[#Filter|Filter]] is based on color tracking in a video fed.
		</td>
	</tr>
	<tr>
		<td>
			[[#PointerDetectorAdvFilter|PointerDetectorAdvFilter]]
		</td>
		<td>
			[[Image:pointeradv.jpg|120x75px|center|PointerDetectorAdvFilter]]
		</td>
		<td>
			It detects pointers in a video feed. The detection of this [[#Filter|Filter]] is based on color tracking for round shapes (e.g. a ball) in a video fed.
		</td>
	</tr>
	<tr>
		<td>
			[[#ZBarFilter|ZBarFilter]]
		</td>
		<td>
			[[Image:bar.jpg|120x75px|center|ZBarFilter]]
		</td>
		<td>
			This [[#Filter|Filter]] detects QR and bar codes in a video feed. When a code is found, the filter raises a [[#event-CodeFound|CodeFound]].
		</td>
	</tr>
	<tr>
		<td>
			[[#PlateDetectorFilter|PlateDetectorFilter]]
		</td>
		<td>
			[[Image:plate.jpg|120x75px|center|PlateDetectorFilter]]
		</td>
		<td>
			This [[#Filter|Filter]] detects vehicle plates in a video feed.
		</td>
	</tr>
	<tr>
		<td rowspan="2">
			Augmented Reality
		</td>
		<td>
			[[#ChromaFilter|ChromaFilter]]
		</td>
		<td>
			[[Image:chroma.jpg|120x75px|center|ChromaFilter]]
		</td>
		<td>
			This type of [[#Filter|Filter]] makes transparent a color range in the top layer, revealing another image behind.
		</td>
	</tr>
	<tr>
		<td>
			[[#JackVaderFilter|JackVaderFilter]]
		</td>
		<td>
			[[Image:jackvader.jpg|120x75px|center|JackVaderFilter]]
		</td>
		<td>
			[[#Filter|Filter]] that detects faces in a video feed. Those on the right half of the feed are overlaid with a pirate hat, and those on the left half are covered by a Darth Vader helmet. This is an example filter, intended to demonstrate how to integrate computer vision capabilities into the multimedia infrastructure.
		</td>
	</tr>
</table>


==== Remote Classes ====
Note: Parameters ending with "?" are optionals.

<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="PlayerEndpoint">PlayerEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#UriEndpoint|UriEndpoint]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]</font></li>

                <li><font face="Courier New, monospace">String
                
                uri</font></li>

                <li><font face="Courier New, monospace">boolean
                
                useEncodedMedia?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 play()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-EndOfStream|EndOfStream]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaObject">MediaObject</b></font></td>
    </tr>
    
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                [[#MediaPipeline|MediaPipeline]] getMediaPipeline()
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaObject|MediaObject]] getParent()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-Error|Error]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="HttpGetEndpoint">HttpGetEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#HttpEndpoint|HttpEndpoint]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">boolean
                
                terminateOnEOS?</font></li>

                <li><font face="Courier New, monospace">[[#MediaProfileSpecType|MediaProfileSpecType]]
                
                mediaProfile?</font></li>

                <li><font face="Courier New, monospace">int
                
                disconnectionTimeout?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="WebRtcEndpoint">WebRtcEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#SdpEndpoint|SdpEndpoint]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="SessionEndpoint">SessionEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Endpoint|Endpoint]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-MediaSessionTerminatedint|MediaSessionTerminated]]</font></li>
                <li><font face="Courier New, monospace">[[#event-MediaSessionStarted|MediaSessionStarted]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaMixer">MediaMixer</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaObject|MediaObject]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="ZBarFilter">ZBarFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-CodeFound|CodeFound]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="Filter">Filter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaElement|MediaElement]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="Endpoint">Endpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaElement|MediaElement]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="PointerDetectorAdvFilter">PointerDetectorAdvFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">[[#WindowParam|WindowParam]]
                
                calibrationRegion</font></li>

                <li><font face="Courier New, monospace">[[#PointerDetectorWindowMediaParam|PointerDetectorWindowMediaParam]]
                
                window?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 addWindow([[#PointerDetectorWindowMediaParam|PointerDetectorWindowMediaParam]] window)
                </font></li>

                <li><font face="Courier New, monospace">
                
                 clearWindows()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 trackcolourFromCalibrationRegion()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 removeWindow(String windowId)
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-WindowIn|WindowIn]]</font></li>

                <li><font face="Courier New, monospace">[[#event-WindowOut|WindowOut]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="UriEndpoint">UriEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Endpoint|Endpoint]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                String getUri()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 pause()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 stop()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="HttpPostEndpoint">HttpPostEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#HttpEndpoint|HttpEndpoint]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                disconnectionTimeout?</font></li>

                <li><font face="Courier New, monospace">boolean
                
                useEncodedMedia?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#EndOfStream|EndOfStream]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="RtpEndpoint">RtpEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#SdpEndpoint|SdpEndpoint]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaPad">MediaPad</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaObject|MediaObject]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                [[#MediaElement|MediaElement]] getMediaElement()
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaType|MediaType]] getMediaType()
                </font></li>

                <li><font face="Courier New, monospace">
                
                String getMediaDescription()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="PointerDetectorFilter">PointerDetectorFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">[[#PointerDetectorWindowMediaParam|PointerDetectorWindowMediaParam]]
                
                window?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 addWindow([[#PointerDetectorWindowMediaParam|PointerDetectorWindowMediaParam]] window)
                </font></li>

                <li><font face="Courier New, monospace">
                
                 clearWindows()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 removeWindow(String windowId)
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-WindowIn|WindowIn]]</font></li>

                <li><font face="Courier New, monospace">[[#event-WindowOut|WindowOut]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaSource">MediaSource</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaPad|MediaPad]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                [[#MediaSink|MediaSink]][] getConnectedSinks()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 connect([[#MediaSink|MediaSink]] sink)
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="ChromaFilter">ChromaFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">[[#WindowParam|WindowParam]]
                
                window</font></li>

                <li><font face="Courier New, monospace">String
                
                backgroundImage?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 setBackground(String uri)
                </font></li>

                <li><font face="Courier New, monospace">
                
                 unsetBackground()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaPipeline">MediaPipeline</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaObject|MediaObject]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaSink">MediaSink</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaPad|MediaPad]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 disconnect([[#MediaSource|MediaSource]] src)
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaSource|MediaSource]] getConnectedSrc()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="DispatcherMixer">DispatcherMixer</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaMixer|MediaMixer]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="JackVaderFilter">JackVaderFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="HttpEndpoint">HttpEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#SessionEndpoint|SessionEndpoint]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                String getUrl()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="SdpEndpoint">SdpEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#SessionEndpoint|SessionEndpoint]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                String generateOffer()
                </font></li>

                <li><font face="Courier New, monospace">
                
                String processOffer(String offer)
                </font></li>

                <li><font face="Courier New, monospace">
                
                String processAnswer(String answer)
                </font></li>

                <li><font face="Courier New, monospace">
                
                String getLocalSessionDescriptor()
                </font></li>

                <li><font face="Courier New, monospace">
                
                String getRemoteSessionDescriptor()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="FaceOverlayFilter">FaceOverlayFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 unsetOverlayedImage()
                </font></li>

                <li><font face="Courier New, monospace">
                
                 setOverlayedImage(String uri, float offsetXPercent, float offsetYPercent, float widthPercent, float heightPercent)
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="PlateDetectorFilter">PlateDetectorFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#event-PlateDetected|PlateDetected]]</font></li>
            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="RecorderEndpoint">RecorderEndpoint</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#UriEndpoint|UriEndpoint]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">String
                
                uri</font></li>

                <li><font face="Courier New, monospace">[[#MediaProfileSpecType|MediaProfileSpecType]]
                
                mediaProfile?</font></li>

                <li><font face="Courier New, monospace">boolean
                
                stopOnEndOfStream?</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                 record()
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaElement">MediaElement</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#MediaObject|MediaObject]]</font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>
                <li><font face="Courier New, monospace">
                
                [[#MediaSource|MediaSource]][] getMediaSrcs()
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaSource|MediaSource]][] getMediaSrcs([[#MediaType|MediaType]] mediaType, String description)
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaSource|MediaSource]][] getMediaSrcs([[#MediaType|MediaType]] mediaType)
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaSink|MediaSink]][] getMediaSinks()
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaSink|MediaSink]][] getMediaSinks([[#MediaType|MediaType]] mediaType)
                </font></li>

                <li><font face="Courier New, monospace">
                
                [[#MediaSink|MediaSink]][] getMediaSinks([[#MediaType|MediaType]] mediaType, String description)
                </font></li>

                <li><font face="Courier New, monospace">
                
                 connect([[#MediaElement|MediaElement]] sink, [[#MediaType|MediaType]] mediaType, String mediaDescription)
                </font></li>

                <li><font face="Courier New, monospace">
                
                 connect([[#MediaElement|MediaElement]] sink, [[#MediaType|MediaType]] mediaType)
                </font></li>

                <li><font face="Courier New, monospace">
                
                 connect([[#MediaElement|MediaElement]] sink)
                </font></li>
            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>



<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="GStreamerFilter">GStreamerFilter</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#Filter|Filter]]</font></td>
    </tr>
    
    <tr>        
        <td>Constructor Parameters</td>
        <td><ul>
                <li><font face="Courier New, monospace">[[#MediaPipeline|MediaPipeline]]
                
                mediaPipeline</font></li>

                <li><font face="Courier New, monospace">String
                
                command</font></li>

                <li><font face="Courier New, monospace">int
                
                garbagePeriod?</font></li>
            </ul>
        </td>        
    </tr>
    
    <tr>
        <td width="20%">Declared Methods</td>
        <td><ul>            </ul>
        </td>
    </tr>
        
    <tr>
        <td>Declared Events</td>
        <td><ul>            </ul>
        </td>
    </tr>
    
</table>

==== Events ====
<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-PlateDetected">PlateDetected</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                String plate
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-EndOfStream">EndOfStream</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-CodeFound">CodeFound</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                String codeType
            </font></li>
            <li><font face="Courier New, monospace">
                String value
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-Error">Error</b></font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                [[#MediaObject|MediaObject]] object
            </font></li>
            <li><font face="Courier New, monospace">
                String description
            </font></li>
            <li><font face="Courier New, monospace">
                int errorCode
            </font></li>
            <li><font face="Courier New, monospace">
                String type
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-MediaSessionTerminated">MediaSessionTerminated</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-WindowIn">WindowIn</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                String windowId
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-MediaSessionStarted">MediaSessionStarted</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-WindowOut">WindowOut</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Parent Class</td>
        <td><font face="Courier New, monospace">[[#event-Media|Media]]</font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                String windowId
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="event-Media">Media</b></font></td>
    </tr>
    
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                [[#MediaObject|MediaObject]] source
            </font></li>
            <li><font face="Courier New, monospace">
                String type
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


==== Types ====
<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaProfileSpecType">MediaProfileSpecType</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Enum constants</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                WEBM
            </font></li>
            <li><font face="Courier New, monospace">
                MP4
            </font></li>
            </ul>
        </td>
    </tr>    
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="MediaType">MediaType</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Enum constants</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                AUDIO
            </font></li>
            <li><font face="Courier New, monospace">
                DATA
            </font></li>
            <li><font face="Courier New, monospace">
                VIDEO
            </font></li>
            </ul>
        </td>
    </tr>    
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="PointerDetectorWindowMediaParam">PointerDetectorWindowMediaParam</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                String id
            </font></li>
            <li><font face="Courier New, monospace">
                int height
            </font></li>
            <li><font face="Courier New, monospace">
                int width
            </font></li>
            <li><font face="Courier New, monospace">
                int upperRightX
            </font></li>
            <li><font face="Courier New, monospace">
                int upperRightY
            </font></li>
            <li><font face="Courier New, monospace">
                String activeImage?
            </font></li>
            <li><font face="Courier New, monospace">
                float imageTransparency?
            </font></li>
            <li><font face="Courier New, monospace">
                String image?
            </font></li>
            <li><font face="Courier New, monospace">
                String inactiveImage?
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>


<table border="1" cellspacing="0" cellpading="0" width="60%">
    <tr>
        <td colspan="2"><font face="Courier New, monospace"><b id="WindowParam">WindowParam</b></font></td>
    </tr>
    
    <tr>
        <td width="20%">Properties</td>
        <td><ul>
            <li><font face="Courier New, monospace">
                int topRightCornerX
            </font></li>
            <li><font face="Courier New, monospace">
                int topRightCornerY
            </font></li>
            <li><font face="Courier New, monospace">
                int width
            </font></li>
            <li><font face="Courier New, monospace">
                int height
            </font></li>
            </ul>
        </td>
    </tr>
    
</table>

